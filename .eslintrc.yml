env:
  es2021: true # Adds all ECMAScript 2021 global variables and automatically sets the parser's ecmaVersion to 2021.

root: true

parser: '@typescript-eslint/parser' # Parser that converts TypeScript to an ESTree compatible form so it can be used in ESLint.

parserOptions:
  sourceType: module #'script' - require, module - import
  project: ./tsconfig.json # Allows to provide a path to project's tsconfig.json. This setting is required if used rules which require type information

extends: # It is possible extend the ESLint config of your project with the shareable config. Plugins can also come with different sets of shareable configs.
  - eslint:recommended
  - plugin:@typescript-eslint/recommended # Don't need to add the plugins key with eslint-plugin-react in it because it is already included in the recommended config.

# plugins: ESLint plugins allow to add custom rules according to the needs of project. Adding a plugin does not mean that all the rules for the plugins will be applied automatically, it requires individually apply each rule

rules:
  max-len:
    - error
    - code: 120
  no-multiple-empty-lines:
    - error
    - max: 1
  no-var:
    - error
  '@typescript-eslint/explicit-function-return-type':
    - error
    - allowTypedFunctionExpressions: true # Type all function at once
  '@typescript-eslint/quotes':
    - error
    - single
  '@typescript-eslint/object-curly-spacing': # { 'a': 1 } not {'a': 1}
    - error
    - always
  '@typescript-eslint/indent':
    - warn
    - 2 # Indent of 4 spaces with VariableDeclarator set to 2
    - SwitchCase: 1 # Indent of 2 spaces with SwitchCase set to 1
  '@typescript-eslint/semi':
    - error
    - always
  '@typescript-eslint/comma-dangle':
    - error
    - always-multiline #  requires trailing commas when the last element or property is in a different line than the closing ] or } and disallows trailing commas when the last element or property is on the same line as the closing ] or }
  '@typescript-eslint/no-unused-vars':
    - error
    - vars: all
      args: after-used # unused arguments that occur before the last used argument will not be checked
      argsIgnorePattern: ^_
      caughtErrors: all
  '@typescript-eslint/no-empty-interface':
    - error
    - allowSingleExtends: true
  '@typescript-eslint/no-explicit-any':
    - error
